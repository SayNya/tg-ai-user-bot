import structlog
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from telethon.errors import SessionPasswordNeededError

from src.context import AppContext
from src.db.repositories.credentials import CredentialsRepository
from src.models.credentials import CredentialsModel
from src.tg_bot.keyboards.inline.user import UserInlineButtons
from src.user_bot.bot import UserClient


async def start_restore(
    msg: types.Message,
    bot: Bot,
    state: FSMContext,
    user_clients: dict[int, UserClient],
    context: AppContext,
) -> None:
    if msg.from_user is None:
        return

    user_id = msg.from_user.id
    user_client = user_clients.get(user_id)

    if user_client:
        await msg.answer("‚úÖ –°–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    cd_repository = CredentialsRepository(
        context["db_pool"],
        context["db_logger"],
    )
    credentials: CredentialsModel | None = (
        await cd_repository.get_credentials_by_user_id(user_id)
    )
    if not credentials:
        await msg.answer(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register."
        )
        return

    user_client = UserClient(user_id=user_id, context=context, telegram_bot=bot)
    phone_code_hash = await user_client.init_client(
        api_id=credentials.api_id,
        api_hash=credentials.api_hash,
        phone=credentials.phone,
    )

    await state.set_state("waiting_for_restore_code")
    await state.update_data(
        phone_code_hash=phone_code_hash,
        phone=credentials.phone,
        user_client=user_client,
    )

    await msg.answer(
        "üîπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üîπ\n\n"
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –≤–∞–º –≤ Telegram, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:üìå "123_45"\n\n'
        "‚ùó –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏!",
        reply_markup=UserInlineButtons.cancel(namespace="restore"),
    )


async def restore_code(
    msg: types.Message,
    state: FSMContext,
    user_clients: dict[int, UserClient],
) -> None:
    if msg.from_user is None or msg.text is None:
        return

    data = await state.get_data()
    phone_code_hash = data.get("phone_code_hash")
    phone = data.get("phone")
    user_client = data.get("user_client")

    if not phone_code_hash or not phone:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    user_id = msg.from_user.id

    tg_code = msg.text.split("_")
    if len(tg_code) != 2:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞")
        return
    tg_code = "".join(tg_code)

    try:
        await user_client.confirm_code(
            phone=phone,
            code=tg_code,
            phone_code_hash=phone_code_hash,
        )
        await msg.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        user_clients[user_id] = user_client
        await state.clear()
    except SessionPasswordNeededError:
        await msg.answer(
            "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:",
            reply_markup=UserInlineButtons.cancel(namespace="restore"),
        )
        await state.set_state("waiting_for_restore_password")
    except Exception as e:
        logger = structlog.get_logger()
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞", error=str(e))
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def restore_password(
    msg: types.Message,
    state: FSMContext,
    user_clients: dict[int, UserClient],
) -> None:
    if msg.from_user is None or msg.text is None:
        return

    user_id = msg.from_user.id
    data = await state.get_data()
    user_client: UserClient = data.get("user_client")

    if not user_client:
        await msg.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        await user_client.enter_password(msg.text)
        await msg.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        user_clients[user_id] = user_client
        await state.clear()
    except Exception as e:
        logger = structlog.get_logger()
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è", error=str(e))
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
