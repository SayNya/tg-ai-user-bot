services:

  aiogram-service:
    build:
      context: ../reader-telegram-bot
      dockerfile: Dockerfile
    env_file:
      - ../reader-telegram-bot/.env 
    command: python src/main.py
    restart: on-failure
    depends_on:
      - db
      - rabbitmq
      - redis

  telethon-service:
    build:
      context: ../reader-telethon-service
      dockerfile: Dockerfile
    env_file:
      - ../reader-telethon-service/.env
    command: python src/main.py
    restart: on-failure
    depends_on:
      - db
      - rabbitmq
      - redis
    
  db:
    image: postgres:17-alpine
    container_name: reader-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=reader
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"    # порт для приложений (AMQP)
      - "15672:15672"  # порт для браузера (RabbitMQ UI)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: on-failure
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8-alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  pgdata:
